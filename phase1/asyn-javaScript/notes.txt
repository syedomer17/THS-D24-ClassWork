Synchronous: it will follow a sequence, blocking code

one
two

Asynchronous: it will not follow a sequence, non-blocking

one
two



-----------------------------------

Asynchronous
- Async Callbacks
- Async Promises
    a. then / catch
    a. async / await

File System
Network Request (API call)


-----------------------------------

setTimeOut Observation:

1. if we don't give any timers, it will follow top to bottom (queue)
2. Synchronous operation will be be performed first, then async will be executed 
3. setTimeout is a non blocking, where all timeouts will start at once
4. nested setTimeout are dependent on the outer setTimeOut


Event Loop Behaviour:
https://www.jsv9000.app/
1. All the async setTimeout will go to Task Queue also know as Macro Queue
2. Normal functions will always go to Call Stack
3. if the setTimeOut timers are same, then it will follow Queue FIFO operation,
or else depends on the timer
4. Event Loop make sures that all the Synchronous operation has been executed first,
and the call stack is empty, then only it will allow task queue

----------------------------------------------------------------------------------------

Async Callbacks: 
    Cons:
      - Callback Hell 

----------------------------------------------------------------------------------------
Async Promises:  It's an object that have 3 states
a. pending state (initial state of a promise)
b. resolve state (when a async task is executed successfully)
c. reject state  (when a async task got some error)


Cosumption of a Promise
1. using .then and .catch
.then => it will go to .then block when the state of a promise is resolved
.catch => it will go to .catch block when the state of a promise is rejected


----------------------------------------------------------------------------------------
Solving Callback Hell
Solution::
1. Promises (Promise Chaining)
2. Async / Await


async/await
1. async/await doesn't have a built in error handling, 
    use try/catch block
2. add "await" keyword before the method that returns you a promise
3. Change your function to async function by adding "async" keyword

----------------------------------------------------------------------------------------
Custom Promise
Convert Callbacks to Promise


----------------------------------------------------------------------------------------

async await vs then catch

when consuming a independent promises
1. Promise.all (order, faster) [Concurrent Request]
2. .then .catch (not in order, faster) [Concurrent Request]
3. async await (in order, slower) 

when consuming a dependent promises
1. async await (in order, slower)
2. promise chaining [.then .then ... .catch]  
3. nested .then .catch (PROMISE HELL) AVOID 

Resources: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all

----------------------------------------------------------------------------------------